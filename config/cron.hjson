## UDW (Unizin Data Warehouse) queries for MyLA cron job
{
    "metadata":
        '''
        select key as pkey, value as pvalue from unizin_metadata
        ''',
    "user" :
        '''
        with
        enroll_data as (select id as enroll_id, user_id, type from enrollment_dim where course_id='{course_id}'
                        and type in ('StudentEnrollment', 'TaEnrollment', 'TeacherEnrollment') and workflow_state= 'active'),
        user_info as (select p.unique_name,p.sis_user_id, u.name, u.id as user_id, u.global_canvas_id
                    from (SELECT ROW_NUMBER() OVER (PARTITION BY user_id order by sis_user_id asc) AS row_number, * FROM pseudonym_dim) as p
                    join user_dim u on u.id = p.user_id WHERE row_number = 1),
        user_enroll as (select u.unique_name, u.sis_user_id, u.name, u.user_id, e.enroll_id,
                        u.global_canvas_id, e.type from enroll_data e join user_info u on e.user_id= u.user_id),
        course_fact as (select enrollment_id, current_score, final_score from course_score_fact
                        where course_id='{course_id}'),
        final as (select cast(u.global_canvas_id as BIGINT) as user_id,u.name, u.sis_user_id as sis_id, u.unique_name as sis_name,
                '{course_id}' as course_id, c.current_score as current_grade, c.final_score as final_grade,
                u.type as enrollment_type
                from user_enroll u left join course_fact c on u.enroll_id= c.enrollment_id)
        select * from final
        order by user_id
        ''',
    "assignment_groups": 
        '''
        with assignment_details as (select ad.due_at,ad.title,af.course_id ,af.assignment_id,af.points_possible,af.assignment_group_id from assignment_fact af inner join assignment_dim ad on af.assignment_id = ad.id where af.course_id='{course_id}' and ad.visibility = 'everyone' and ad.workflow_state='published'),
        assignment_grp as (select agf.*, agd.name from assignment_group_dim agd join assignment_group_fact agf on agd.id = agf.assignment_group_id  where agd.course_id='{course_id}' and workflow_state='available'),
        assign_more as (select distinct(a.assignment_group_id) ,da.group_points from assignment_details a join (select assignment_group_id, sum(points_possible) as group_points from assignment_details group by assignment_group_id) as da on a.assignment_group_id = da.assignment_group_id ),
        grp_full as (select a.group_points, b.assignment_group_id from assign_more a right join assignment_grp b on a.assignment_group_id = b.assignment_group_id),
        assign_rules as (select DISTINCT ad.assignment_group_id,agr.drop_lowest,agr.drop_highest from grp_full ad join assignment_group_rule_dim agr on ad.assignment_group_id=agr.assignment_group_id),
        assignment_grp_points as (select ag.*, am.group_points AS group_points from assignment_grp ag join grp_full am on ag.assignment_group_id = am.assignment_group_id),
        assign_final as (select assignment_group_id AS id, course_id AS course_id, group_weight AS weight, name AS name, group_points AS group_points from assignment_grp_points)
        select g.*, ar.drop_lowest,ar.drop_highest from assign_rules ar join assign_final g on ar.assignment_group_id=g.id
        order by id;
        ''',   
    "assignment": 
        '''
        with assignment_info as
            (select ad.due_at AS due_date,ad.due_at at time zone 'America/Detroit' as local_date,
            ad.title AS name,af.course_id AS course_id,af.assignment_id AS id,
            af.points_possible AS points_possible,af.assignment_group_id AS assignment_group_id
            from assignment_fact af inner join assignment_dim ad on af.assignment_id = ad.id where af.course_id='{course_id}'
            and ad.visibility = 'everyone' and ad.workflow_state='published')
        select * from assignment_info
        order by id
        ''',
    "assignment_weight": 
        '''
        with course as (select course_id, sum(group_weight) as group_weight from assignment_group_fact
        where course_id = '{course_id}' group by course_id having sum(group_weight)>1)
        (select CASE WHEN EXISTS (SELECT * FROM course WHERE group_weight > 1) THEN CAST(1 AS BOOLEAN) ELSE CAST(0 AS BOOLEAN) END)
        ''',
    "term": 
        '''
        SELECT id, canvas_id, name, date_start, date_end FROM enrollment_term_dim order by id;
        ''',
    "course": 
        '''
            select id, canvas_id, enrollment_term_id, name, start_at, conclude_at
            from course_dim c
            where c.id = '{course_id}'
        ''',
    "resource": 
        '''
            select id, file_state, display_name from file_dim 
            where course_id in %(course_ids)s
            order by id
        ''', 
    "submission": 
        '''
            with sub_fact as 
            (
                select 
                    submission_id, 
                    assignment_id, 
                    course_id, 
                    user_id, 
                    global_canvas_id, 
                    published_score 
                from submission_fact sf join user_dim u on sf.user_id = u.id 
                where course_id = '{course_id}'
            ),
            enrollment as 
            (
                select
                    distinct(user_id) 
                from enrollment_dim 
                where 
                    course_id = '{course_id}' 
                    and workflow_state='active' 
                    and type = 'StudentEnrollment'
                ),
            sub_with_enroll as
            (
                select 
                    sf.* 
                from sub_fact sf join enrollment e on e.user_id = sf.user_id
            ),
            submission_time as 
            (
                select 
                    sd.id, 
                    sd.submitted_at, 
                    sd.graded_at, 
                    sd.posted_at at time zone 'America/Detroit' as grade_posted_local_date, 
                    sd.workflow_state as submission_workflow_state 
                from 
                    submission_dim sd join sub_fact suf on sd.id=suf.submission_id
            ),
            assign_fact as 
            (
                select 
                    s.*,a.title 
                from 
                    assignment_dim a join sub_with_enroll s on s.assignment_id=a.id 
                where 
                    a.course_id='{course_id}' 
                    and a.workflow_state='published'
            ),
            assign_sub_time as 
            (
                select 
                    a.*, 
                    t.submitted_at, 
                    t.graded_at, 
                    t.grade_posted_local_date, 
                    t.submission_workflow_state 
                from 
                    assign_fact a join submission_time t on a.submission_id = t.id
            ),
            all_assign_sub as 
            (
                select
                    submission_id AS id, 
                    assignment_id AS assignment_id, 
                    course_id, 
                    global_canvas_id AS user_id, 
                    (
                        case 
                            when 
                                (grade_posted_local_date is null or submission_workflow_state != 'graded') 
                            then
                                null 
                            else 
                                round(published_score,1) 
                            end
                    ) AS score, 
                    submitted_at AS submitted_at, 
                    graded_at AS graded_date, 
                    grade_posted_local_date 
                from 
                    assign_sub_time 
                order by assignment_id
            )
            select 
                f.id, 
                f.assignment_id, 
                f.course_id, 
                cast(f.user_id as bigint), 
                f.score, 
                f.submitted_at, 
                f.graded_date, 
                f.grade_posted_local_date,
                f1.avg_score 
            from 
                all_assign_sub f join 
                (
                    select 
                        assignment_id,
                        round(avg(score),1) as avg_score
                    from 
                        all_assign_sub 
                    group by assignment_id
                ) as f1 
                on f.assignment_id = f1.assignment_id
            order by assignment_id, user_id
        '''
}