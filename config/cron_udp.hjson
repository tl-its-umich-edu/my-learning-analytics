## UDP (Unizin Data Platform) queries for MyLA cron job
{
    "metadata":
        // The dag_run date inside publish_info report would reflect when the data was loaded into the UDP context_store by batch-ingest ETL process,
        // and it wouldnâ€™t reflect when the data was actually dumped from canvas.
        // More info on UDP's batch-ingest DAG process can be found here: https://resources.unizin.org/display/UDP/Batch-ingest+application
        '''
            SELECT * FROM EXTERNAL_QUERY("us.context_store", "select 'canvasdatadate' as pkey, min(dag_run) as pvalue from report.publish_info pi2");        
        ''',
    "user" :
        '''
        select
            (
            cast(@canvas_data_id_increment as bigint)
            +
            cast(p2.lms_ext_id as bigint)
            ) as user_id,
            case
                WHEN pe.email_address IS NOT NULL THEN LOWER(REGEXP_EXTRACT(pe.email_address, r'^([^@]+)'))
                else p2.sis_ext_id end as sis_name,
            cast(co.lms_int_id as bigint) as course_id,
            cg.le_current_score as current_grade,
            cg.le_final_score as final_grade,
            case
                when cse.role = 'Student' then 'StudentEnrollment'
                when cse.role = 'TeachingAssistant' then 'TaEnrollment'
                when cse.role = 'Teacher' then 'TeacherEnrollment'
                else '' end
                as enrollment_type
        from context_store_entity.course_section_enrollment cse
        left join context_store_entity.course_section cs
            on cse.course_section_id = cs.course_section_id
        left join context_store_keymap.course_offering co
            on cs.le_current_course_offering_id = co.id
        left join context_store_entity.person p
            on cse.person_id = p.person_id
        left join context_store_keymap.person p2
            on p.person_id = p2.id
        left join context_store_entity.person_email pe
            on p.person_id = pe.person_id
        left join context_store_entity.course_grade cg
            on cse.course_section_id = cg.course_section_id and cse.person_id = cg.person_id
        where
            co.lms_int_id IN UNNEST(@course_ids)
            and cse.role IN UNNEST(ARRAY['Student', 'Teacher', 'TeachingAssistant'])
            and cse.role_status = 'Enrolled'
            and cse.enrollment_status = 'Active'
        order by user_id
        ''',
    "assignment_groups": 
        '''
        with assignment_details as (
            select la.due_date, title, la.course_offering_id, la.learner_activity_id, la.points_possible, la.learner_activity_group_id
            from context_store_entity.learner_activity la, context_store_keymap.course_offering co
            where
                la.visibility = 'everyone'
                and	la.status = 'published'
                and la.course_offering_id = co.id
                and co.lms_int_id IN UNNEST(@course_ids)
            ), assignment_grp as (
                select lg.*
                from context_store_entity.learner_activity_group lg, context_store_keymap.course_offering co
                where
                lg.status = 'available'
                and lg.course_offering_id = co.id
                and co.lms_int_id IN UNNEST(@course_ids)
            ), assign_more as (
                select distinct(a.learner_activity_group_id), da.group_points
                from assignment_details a
                JOIN UNNEST((
                    SELECT ARRAY_AGG(STRUCT(learner_activity_group_id, group_points))
                    FROM (
                        select learner_activity_group_id, sum(points_possible) as group_points
                        from assignment_details
                        group by learner_activity_group_id
                    )
                )) as da
                on a.learner_activity_group_id = da.learner_activity_group_id
            ), grp_full as (
                select a.group_points, b.learner_activity_group_id
                from assign_more a
                right join assignment_grp b
                    on a.learner_activity_group_id = b.learner_activity_group_id
            ), assign_rules as (
                select distinct ad.learner_activity_group_id, agr.drop_lowest_amount as drop_lowest, agr.drop_highest_amount as drop_highest
                from grp_full ad
                join context_store_entity.learner_activity_group agr
                    on ad.learner_activity_group_id = agr.learner_activity_group_id
            ), assignment_grp_points as (
                select ag.*, am.group_points AS group_points, ar.drop_lowest as drop_lowest, ar.drop_highest as drop_highest
                from assignment_grp ag 
                join grp_full am on ag.learner_activity_group_id = am.learner_activity_group_id
                join assign_rules ar on ag.learner_activity_group_id = ar.learner_activity_group_id
            )
            select
            cast(lag_km.lms_int_id as INT64) as id,
            cast(co_km.lms_int_id as INT64) as course_id,
            cast(agp.group_weight as FLOAT64) as weight,
            agp.name as name,
            agp.group_points as group_points,
            agp.drop_lowest as drop_lowest, 
            agp.drop_highest as drop_highest
            from assignment_grp_points agp, 
            context_store_keymap.course_offering co_km, 
            context_store_keymap.learner_activity_group lag_km
            where agp.course_offering_id = co_km.id
            and agp.learner_activity_group_id = lag_km.id
            order by id
        ''' ,
    "assignment": 
        '''
        with assignment_info as
        (
            select
                la.due_date as due_date,
                la.title as name,
                cast(co.lms_int_id as INT64) as course_id,
                cast(la_km.lms_int_id as INT64) as id,
                la.points_possible as points_possible,
                cast(lag_km.lms_int_id as INT64) as assignment_group_id
            from
                context_store_entity.learner_activity la,
                context_store_keymap.course_offering co,
                context_store_keymap.learner_activity la_km,
                context_store_keymap.learner_activity_group lag_km
            where
                la.visibility = 'everyone'
                and	la.status = 'published'
                and la.course_offering_id = co.id
                and co.lms_int_id IN UNNEST(@course_ids)
                and la.learner_activity_id = la_km.id
                and la.learner_activity_group_id = lag_km.id
        )
        select * from assignment_info
        order by id
        ''',
    "assignment_weight":
        '''
        select
            cast(co_km.lms_int_id as bigint) as course_id,
            case when sum(group_weight) > 1
            then
                cast(1 as boolean)
            else
                cast(0 as boolean)
            end as consider_weight
        from
            context_store_entity.learner_activity_group lag,
            context_store_keymap.course_offering co_km
        where
            lag.course_offering_id = co_km.id
            and co_km.lms_int_id IN UNNEST(@course_ids)
            group by co_km.lms_int_id
        ''',
    "term":
        '''
        select
            cast(ka.lms_int_id as INT64) as id,
            cast(ka.lms_ext_id as INT64) as canvas_id,
            a.name as name,
            a.le_term_begin_date as date_start,
            a.le_term_end_date as date_end
        from
            context_store_entity.academic_term as a
            left join context_store_keymap.academic_term as ka on ka.id = a.academic_term_id
        where
            ka.lms_ext_id is not null
        order by id
        ''',
     /* start_at and conclude_at contain only the date information, with time values truncated
        Mapping all courses with a NULL term into the term called No Term
     */
    "course":
        '''
        SELECT
            cast(co2.lms_int_id as INT64) as id,
            cast(co2.lms_ext_id as INT64) as canvas_id,
            cast(at2.lms_int_id as INT64) as enrollment_term_id,
            co.le_code as name,
            TIMESTAMP(co.le_start_date) as start_at,
            TIMESTAMP(co.le_end_date) as conclude_at
        FROM
            context_store_entity.course_offering co
            LEFT OUTER JOIN context_store_entity.academic_term at1 on (co.academic_term_id = at1.academic_term_id),
            context_store_keymap.course_offering co2,
            context_store_keymap.academic_term at2
            WHERE co2.lms_int_id IN UNNEST(@course_ids)
            and co.course_offering_id = co2.id
            and at1.academic_term_id = at2.id
        ''',
    "resource":
        '''
        select 
            cast(f_km.lms_int_id as BIGINT) as id, 
            f.status as file_state, 
            f.display_name as display_name
        from context_store_entity.file f, context_store_keymap.file f_km, context_store_keymap.course_offering co_km
        where
            f.course_offering_id = co_km.id
            and f.file_id = f_km.id
            and co_km.lms_int_id IN UNNEST(@course_ids)
        order by id
        ''',
    "submission":
        '''
        with enrollment as
        (
            select
                distinct cse.person_id as user_id
            from context_store_entity.course_section_enrollment cse
                left join context_store_entity.course_section cs
                    on cse.course_section_id = cs.course_section_id
                left join context_store_keymap.course_offering co
                    on cs.le_current_course_offering_id = co.id
            where 
                co.lms_int_id in UNNEST(@course_ids)
                and cse.role_status ='Enrolled' 
                and cse.role = 'Student'
                and cse.enrollment_status = 'Active'
        ),
        submission as
        (
            select
                la.status,
                la.visibility,
                la2.lms_int_id as assignment_id,
                co.lms_int_id  as course_id,
                la.title as assignment_title,
                lar.published_score as published_score,
                lar.response_date as submitted_at,
                lar.graded_date as graded_at,
                lar.posted_at as grade_posted,
                lar.grading_status as submission_workflow_state,
                la.title as title,
                lar.learner_activity_result_id as learner_activity_result_id,
                lar.person_id as short_user_id,
                lar2.lms_int_id as submission_id,
                CAST(@canvas_data_id_increment AS INT64) + CAST(p.lms_ext_id AS INT64) as canvas_user_id
            from context_store_entity.learner_activity_result lar
            join enrollment on lar.person_id= enrollment.user_id
            join enrollment e on lar.person_id = e.user_id
            join context_store_keymap.learner_activity_result lar2 on lar.learner_activity_result_id = lar2.id
            left join context_store_entity.learner_activity la on lar.learner_activity_id = la.learner_activity_id
                left join context_store_keymap.learner_activity la2 on la.learner_activity_id = la2.id
                left join context_store_keymap.course_offering co on co.id = la.course_offering_id
                join context_store_keymap.person p on p.id = lar.person_id
            where
                co.lms_int_id in UNNEST(@course_ids)
                and la.status = 'published'
		),
        all_assign_sub as 
        (
            select
                submission_id AS id, 
                assignment_id AS assignment_id, 
                course_id, 
                canvas_user_id,
                (
                    case 
                        when 
                            (grade_posted is null or submission_workflow_state != 'graded') 
                        then
                            null 
                        else 
                            round(published_score,1) 
                        end
                ) AS score, 
                submitted_at AS submitted_at, 
                graded_at AS graded_date, 
                grade_posted 
            from 
                submission
            order by assignment_id
        )
        select 
            f.id,
            CAST(f.assignment_id AS INT64) AS assignment_id,
            f.course_id,
            CAST(f.canvas_user_id AS INT64) AS user_id,
            CAST(f.score AS FLOAT64) AS score,
            f.submitted_at,
            f.graded_date,
            f.grade_posted,
            CAST(f1.avg_score AS FLOAT64) AS avg_score
        from 
            all_assign_sub f join 
            (
                select 
                    assignment_id,
                    round(avg(score),1) as avg_score
                from 
                    all_assign_sub 
                group by assignment_id
            ) as f1 
            on f.assignment_id = f1.assignment_id
        where f.id is not null
        order by assignment_id, user_id
        '''
}
